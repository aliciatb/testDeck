newCar <- c(2)
predCar <- predict(fitCars, newdata <- data.frame(wt = newCar), interval=("confidence"))
predCar
newCar <- c(2)
predCar <- predict(fitCars, newdata <- data.frame(wt = newCar), interval=("predict"))
predCar
newCar <- c(1)
predCar <- predict(fitCars, newdata <- data.frame(wt = newCar), interval=("predict"))
predCar
25.13523 - 20.12811
20.12811 -25.13523
26.59618 - 20.12811
fitCars <- lm(mpg ~ wt, data=mtcars)
confint(fitCars)
-6.486*2
fitCars <- lm(mpg ~ 2*wt, data=mtcars)
fitCars <- lm(mpg ~ wt, data=mtcars)
fitCars <- lm(mpg ~ wt, data=mtcars)
summary(fitCars)
mean(mtcars$mpg)
confint(fitCars, "wt", level = 0.95)
confint(fitCars, "mpg", level = 0.95)
confint(fitCars, "wt", level = 0.95)
confint(fitCars)
summary(fitCars)$sigma
predict(fitCars, newdata <- data.frame(wt = mean(mtcars$wt)), interval=("confidence"))
tic <- function(gcFirst = TRUE, type=c("elapsed", "user.self", "sys.self"))
{
type <- match.arg(type)
assign(".type", type, envir=baseenv())
if(gcFirst) gc(FALSE)
tic <- proc.time()[type]
assign(".tic", tic, envir=baseenv())
invisible(tic)
}
toc <- function()
{
type <- get(".type", envir=baseenv())
toc <- proc.time()[type]
tic <- get(".tic", envir=baseenv())
print(toc - tic)
invisible(toc)
}
# Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).
#
# What you should submit
#
# The goal of your project is to predict the manner in which they did the exercise. This is the "classe" variable in the training set. You may use any of the other variables to predict with. You should create a report describing how you built your model, how you used cross validation, what you think the expected out of sample error is, and why you made the choices you did. You will also use your prediction model to predict 20 different test cases.
# 5 methods of performing Unilateral Dumbbell Biceps Curl
#   A: exactly according to the specification
#   B: throwing the elbows to the front
#   C: lifting the dumbbell only halfway
#   D: lowering the dumbbell only halfway
#   E: throwing the hips to the front
# Read more: http://groupware.les.inf.puc-rio.br/har#dataset#ixzz34SkM61fw
# 1. Your submission should consist of a link to a Github repo with your R markdown and compiled HTML file describing your analysis. Please constrain the text of the writeup to < 2000 words and the number of figures to be less than 5. It will make it easier for the graders if you submit a repo with a gh-pages branch so the HTML page can be viewed online (and you always want to make it easy on graders :-).
# 2. You should also apply your machine learning algorithm to the 20 test cases available in the test data above. Please submit your predictions in appropriate format to the programming assignment for automated grading. See the programming assignment for additional details.
# Fields removed due to NA data: amplitude_yaw_belt,amplitude_yaw_dumbbell,amplitude_yaw_forearm,kurtosis_picth_arm,kurtosis_picth_belt,kurtosis_picth_dumbbell,kurtosis_picth_forearm,kurtosis_roll_arm,kurtosis_roll_belt,kurtosis_roll_belt,kurtosis_roll_dumbbell,kurtosis_roll_forearm,kurtosis_yaw_arm,kurtosis_yaw_belt,kurtosis_yaw_dumbbell,kurtosis_yaw_forearm,max_yaw_belt,max_yaw_dumbbell,max_yaw_forearm,min_yaw_belt,min_yaw_dumbbell,skewness_pitch_arm,skewness_pitch_dumbbell,skewness_pitch_forearm,skewness_roll_arm,skewness_roll_belt,skewness_roll_belt.1,skewness_roll_dumbbell,skewness_roll_forearm,skewness_yaw_arm,skewness_yaw_belt,skewness_yaw_dumbbell,skewness_yaw_forearm
# Fields removed due to high correlation to other columns:
# getwd()
setwd("~/documents/courses/practical machine learning/project")
library(AppliedPredictiveModeling)
library(caret)
library(ggplot2)
library(Hmisc)
# software environment
sessionInfo()
tic()
trainDataURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainDataFile <- "./data/pml-training.csv"
testDataURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testDataFile <- "./data/pml-testing.csv"
# Download the training and test data files
if (!file.exists(trainDataFile)) {
download.file(trainDataURL,destfile=trainDataFile,method="curl")
dateDownloaded <- date()
}
if (!file.exists(testDataFile)) {
download.file(testDataURL,destfile=testDataFile,method="curl")
}
# training
if (file.exists(trainDataFile)) {
init <- read.csv(trainDataFile, header = TRUE, nrows = 10000, stringsAsFactors = FALSE, na.strings = "NA", quote="")
classes <- sapply(init,class)
rawTrain <- read.csv(trainDataFile, colClasses=classes, header = TRUE)
}
# test
if (file.exists(testDataFile)) {
rawTest <- read.csv(testDataFile, colClasses=classes, header = TRUE)
}
toc()
tidy <- tidy[,-which(names(tidy) %in% c(col))]
tic()
# remove unnecessary fields and create new dataframe for transformations
tidy <- rawTrain[,c(160,2:159)]
tidyTest <- rawTest[,c(160,2:159)]
# add classe as a factor too
tidy <- cbind(activity=as.factor(tidy[,1]),tidy)
tidyTest <- cbind(activity=as.factor(tidyTest[,1]),tidyTest)
# some of the measurements did not contain NA in data file so were converted to character.
maxNas <- .9*nrow(tidy[,])
for(col in names(tidy)){
if(is.character(tidy[,col])==TRUE
&& col %in% c("user_name","cvtd_timestamp","new_window","classe") == FALSE
){
# Finding those and changing back to numeric.
tidy[,col] <- as.numeric(tidy[,col])
tidyTest[,col] <- as.numeric(tidyTest[,col])
}
# Also, remove any cols that are mostly NA altogether since not very useful for prediction
rowNas <- sum(is.na(tidy[,col]))
if(rowNas > maxNas){
tidy <- tidy[,-which(names(tidy) %in% c(col))]
tidyTest <- tidyTest[,-which(names(tidyTest) %in% c(col))]
}
}
# summary(tidy)
# remove near zero values, if any
nsv <- nearZeroVar(tidy[,9:60],saveMetrics=TRUE)
nsv
# remove if nvz == TRUE, but none are true
# check for highly correlated predictors and remove those columns from both sets
M = abs(cor(tidy[,9:60]))
diag(M) <- 0
corPreds <- which(M > 0.9,arr.ind=TRUE)
for(col in unique(row.names(corPreds))){
tidy <- tidy[,-which(names(tidy) %in% c(col))]
tidyTest <- tidyTest[,-which(names(tidyTest) %in% c(col))]
}
toc()
# data should be good enough now to perform exploratory analysis
tic()
# remove unnecessary fields and create new dataframe for transformations
tidy <- rawTrain[,c(160,2:159)]
tidyTest <- rawTest[,c(160,2:159)]
# add classe as a factor too
tidy <- cbind(activity=as.factor(tidy[,1]),tidy)
tidyTest <- cbind(activity=as.factor(tidyTest[,1]),tidyTest)
# some of the measurements did not contain NA in data file so were converted to character.
maxNas <- .9*nrow(tidy[,])
for(col in names(tidy)){
if(is.character(tidy[,col])==TRUE
&& col %in% c("user_name","cvtd_timestamp","new_window","classe") == FALSE
){
# Finding those and changing back to numeric.
tidy[,col] <- as.numeric(tidy[,col])
tidyTest[,col] <- as.numeric(tidyTest[,col])
}
# Also, remove any cols that are mostly NA altogether since not very useful for prediction
rowNas <- sum(is.na(tidy[,col]))
if(rowNas > maxNas){
tidy <- tidy[,-which(names(tidy) %in% c(col))]
tidyTest <- tidyTest[,-which(names(tidyTest) %in% c(col))]
}
}
# summary(tidy)
# remove near zero values, if any
nsv <- nearZeroVar(tidy[,9:60],saveMetrics=TRUE)
nsv
# remove if nvz == TRUE, but none are true
# check for highly correlated predictors and remove those columns from both sets
M = abs(cor(tidy[,9:60]))
diag(M) <- 0
corPreds <- which(M > 0.9,arr.ind=TRUE)
for(col in unique(row.names(corPreds))){
tidy <- tidy[,-which(names(tidy) %in% c(col))]
tidyTest <- tidyTest[,-which(names(tidyTest) %in% c(col))]
}
toc()
# data should be good enough now to perform exploratory analysis
tic()
# split Training into train/test sets
inTrain = createDataPartition(tidy$activity, p = 3/4)[[1]]
training = tidy[inTrain,]
testing = tidy[-inTrain,]
preProc <- preProcess(training[,c(9:49)],method="pca",thresh=.80,scale=TRUE,center=TRUE)
preProc
trainPC <- predict(preProc,training[,c(9:49)])
modelFit <- train(training$activity ~ .,method="rf", data=trainPC)
testPC <- predict(preProc,testing[,c(9:49)])
confusionMatrix(testing$activity, predict(modelFit,testPC))
toc()
View(corPreds)
unique(row.names(corPreds))
head(rawTrain)
summary(rawTrain)
str(rawTrain)
#! head(rawTrain)
# summary(rawTrain)
# str(rawTrain)
head(rawTrain)
# summary(rawTrain)
# str(rawTrain)
head(rawTrain)
head(rawTrain)
# summary(rawTrain)
# str(rawTrain)
head(rawTrain)
# summary(rawTrain)
# str(rawTrain)
#! head(rawTrain)
# summary(rawTrain)
# str(rawTrain)
#! x <- head(rawTrain)
#! x <- head(rawTrain)
# summary(rawTrain)
# str(rawTrain)
View(rawTest)
getwd()
tidy <- rawTrain[,c(160,8:159)]
tidyTest <- rawTest[,c(160,8:159)]
View(tidy)
tidy <- rawTrain[,c(160,8:159)]
tidyTest <- rawTest[,c(160,8:159)]
# some of the measurements did not contain NA in data file so were converted to character.
maxNas <- .9*nrow(tidy[,])
for(col in names(tidy)){
if(is.character(tidy[,col])==TRUE
&& col %in% c("user_name","cvtd_timestamp","new_window","classe") == FALSE
){
# Finding those and changing back to numeric.
tidy[,col] <- as.numeric(tidy[,col])
tidyTest[,col] <- as.numeric(tidyTest[,col])
}
# Also, remove any cols that are mostly NA altogether since not very useful for prediction
rowNas <- sum(is.na(tidy[,col]))
if(rowNas > maxNas){
tidy <- tidy[,-which(names(tidy) %in% c(col))]
tidyTest <- tidyTest[,-which(names(tidyTest) %in% c(col))]
}
}
View(tidy)
nsv <- nearZeroVar(tidy[,2:53],saveMetrics=TRUE)
nsv
M = abs(cor(tidy[,2:53]))
diag(M) <- 0
corPreds <- which(M > 0.9,arr.ind=TRUE)
for(col in unique(row.names(corPreds))){
tidy <- tidy[,-which(names(tidy) %in% c(col))]
tidyTest <- tidyTest[,-which(names(tidyTest) %in% c(col))]
}
setwd("~/scripts/r")
setwd("~/scripts/r")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/documents/courses/practical machine learning/project")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).
#
# What you should submit
#
# The goal of your project is to predict the manner in which they did the exercise. This is the "classe" variable in the training set. You may use any of the other variables to predict with. You should create a report describing how you built your model, how you used cross validation, what you think the expected out of sample error is, and why you made the choices you did. You will also use your prediction model to predict 20 different test cases.
# 5 methods of performing Unilateral Dumbbell Biceps Curl
#   A: exactly according to the specification
#   B: throwing the elbows to the front
#   C: lifting the dumbbell only halfway
#   D: lowering the dumbbell only halfway
#   E: throwing the hips to the front
# Read more: http://groupware.les.inf.puc-rio.br/har#dataset#ixzz34SkM61fw
# 1. Your submission should consist of a link to a Github repo with your R markdown and compiled HTML file describing your analysis. Please constrain the text of the writeup to < 2000 words and the number of figures to be less than 5. It will make it easier for the graders if you submit a repo with a gh-pages branch so the HTML page can be viewed online (and you always want to make it easy on graders :-).
# 2. You should also apply your machine learning algorithm to the 20 test cases available in the test data above. Please submit your predictions in appropriate format to the programming assignment for automated grading. See the programming assignment for additional details.
# Non-accelerometer fields removed: user_name,raw_timestamp_part_1,raw_timestamp_part_2,cvtd_timestamp,new_window,num_window
# Fields removed due to NA data: amplitude_yaw_belt,amplitude_yaw_dumbbell,amplitude_yaw_forearm,kurtosis_picth_arm,kurtosis_picth_belt,kurtosis_picth_dumbbell,kurtosis_picth_forearm,kurtosis_roll_arm,kurtosis_roll_belt,kurtosis_roll_belt,kurtosis_roll_dumbbell,kurtosis_roll_forearm,kurtosis_yaw_arm,kurtosis_yaw_belt,kurtosis_yaw_dumbbell,kurtosis_yaw_forearm,max_yaw_belt,max_yaw_dumbbell,max_yaw_forearm,min_yaw_belt,min_yaw_dumbbell,skewness_pitch_arm,skewness_pitch_dumbbell,skewness_pitch_forearm,skewness_roll_arm,skewness_roll_belt,skewness_roll_belt.1,skewness_roll_dumbbell,skewness_roll_forearm,skewness_yaw_arm,skewness_yaw_belt,skewness_yaw_dumbbell,skewness_yaw_forearm
# Fields removed due to high correlation to other columns: accel_belt_x,accel_belt_y,accel_belt_z,gyros_arm_x,gyros_arm_y,gyros_dumbbell_x,gyros_dumbbell_z,gyros_forearm_z,pitch_belt,roll_belt,total_accel_belt
# getwd()
setwd("~/documents/courses/practical machine learning/project")
library(AppliedPredictiveModeling)
library(caret)
library(ggplot2)
library(Hmisc)
# software environment
sessionInfo()
tic <- function(gcFirst = TRUE, type=c("elapsed", "user.self", "sys.self"))
{
type <- match.arg(type)
assign(".type", type, envir=baseenv())
if(gcFirst) gc(FALSE)
tic <- proc.time()[type]
assign(".tic", tic, envir=baseenv())
invisible(tic)
}
toc <- function()
{
type <- get(".type", envir=baseenv())
toc <- proc.time()[type]
tic <- get(".tic", envir=baseenv())
print(toc - tic)
invisible(toc)
}
tic()
trainDataURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainDataFile <- "./data/pml-training.csv"
testDataURL <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
testDataFile <- "./data/pml-testing.csv"
# Download the training and test data files
if (!file.exists(trainDataFile)) {
download.file(trainDataURL,destfile=trainDataFile,method="curl")
dateDownloaded <- date()
}
if (!file.exists(testDataFile)) {
download.file(testDataURL,destfile=testDataFile,method="curl")
}
# training
if (file.exists(trainDataFile)) {
init <- read.csv(trainDataFile, header = TRUE, nrows = 10000, stringsAsFactors = FALSE, na.strings = "NA", quote="")
classes <- sapply(init,class)
rawTrain <- read.csv(trainDataFile, colClasses=classes, header = TRUE)
}
# test
if (file.exists(testDataFile)) {
rawTest <- read.csv(testDataFile, colClasses=classes, header = TRUE)
}
toc()
head(rawTrain)
summary(rawTrain)
str(rawTrain)
sum(is.na(rawTrain))
nas <- format(sum(is.na(rawTrain)),big.mark=",",scientific=FALSE)
records <- format(nrow(rawTrain),big.mark=",",scientific=FALSE)
paste("Of",records,"records, there are",nas,"incomplete records!")
tic()
# remove unnecessary fields (non-accelerometer activity columns) and create new dataframe for transformations
tidy <- rawTrain[,c(160,8:159)]
tidyTest <- rawTest[,c(160,8:159)]
# some of the measurements did not contain NA in data file so were converted to character.
maxNas <- .9*nrow(tidy[,])
for(col in names(tidy)){
if(is.character(tidy[,col])==TRUE
&& col %in% c("user_name","cvtd_timestamp","new_window","classe") == FALSE
){
# Finding those and changing back to numeric.
tidy[,col] <- as.numeric(tidy[,col])
tidyTest[,col] <- as.numeric(tidyTest[,col])
}
# Also, remove any cols that are mostly NA altogether since not very useful for prediction
rowNas <- sum(is.na(tidy[,col]))
if(rowNas > maxNas){
tidy <- tidy[,-which(names(tidy) %in% c(col))]
tidyTest <- tidyTest[,-which(names(tidyTest) %in% c(col))]
}
}
# summary(tidy)
# remove near zero values, if any
nsv <- nearZeroVar(tidy[,2:53],saveMetrics=TRUE)
nsv
# remove if nvz == TRUE, but none are true
# check for highly correlated predictors and remove those columns from both sets
M = abs(cor(tidy[,2:53]))
diag(M) <- 0
corPreds <- which(M > 0.9,arr.ind=TRUE)
for(col in unique(row.names(corPreds))){
tidy <- tidy[,-which(names(tidy) %in% c(col))]
tidyTest <- tidyTest[,-which(names(tidyTest) %in% c(col))]
}
toc()
# data should be good enough now to perform exploratory analysis
tic()
# split Training into train/test sets
inTrain = createDataPartition(tidy$activity, p = 3/4)[[1]]
training = tidy[inTrain,]
testing = tidy[-inTrain,]
preProc <- preProcess(training[,c(2:42)],method="pca",thresh=.80,scale=TRUE,center=TRUE)
preProc
trainPC <- predict(preProc,training[,c(2:42)])
# use Random Forest model due to more than 2 outcome variables
modelFit <- train(training$activity ~ .,method="rf", data=trainPC)
testPC <- predict(preProc,testing[,c(2:42)])
confusionMatrix(testing$activity, predict(modelFit,testPC))
# todo: document out of sample error estimation of model
toc()
tic()
# split Training into train/test sets
inTrain = createDataPartition(tidy$classe, p = 3/4)[[1]]
training = tidy[inTrain,]
testing = tidy[-inTrain,]
preProc <- preProcess(training[,c(2:42)],method="pca",thresh=.80,scale=TRUE,center=TRUE)
preProc
trainPC <- predict(preProc,training[,c(2:42)])
# use Random Forest model due to more than 2 outcome variables
# modelFit <- train(training$classe ~ .,method="rf", data=trainPC)
# testPC <- predict(preProc,testing[,c(2:42)])
# confusionMatrix(testing$classe, predict(modelFit,testPC))
# todo: document out of sample error estimation of model
toc()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/scripts/r")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain = createDataPartition(segmentationOriginal$Case, p = 3/4)[[1]]
training = segmentationOriginal[ inTrain,]
testing = segmentationOriginal[-inTrain,]
set.seed(125)
modFit <- train(Case ~ ., method="rpart",data=training)
training$TotalIntench2
modFit$finalModel
aData <- c(TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
aData <- c(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(modFit, newdata <- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)), interval=("predict"))
predict(modFit, newdata <- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2), interval=("predict"))
modFit <- train(Class ~ ., method="rpart",data=training)
modFit$finalModel
predict(modFit, newdata <- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2), interval=("predict"))
View(training)
plot(modFit$finalModel, uniform=TRUE, main="Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=.8)
library(rattle)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
a <- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
View(a)
predict(modFit, newdata <- a)
View(training)
modFit <- train(Class ~ ., method="rpart",data=training[,3:119])
modFit$finalModel
fancyRpartPlot(modFit$finalModel)
a <- data.frame(TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
predict(modFit, newdata <- a)
source('~/.active-rstudio-document', echo=TRUE)
prcomp(training)
View(training)
prcomp(training[,-1])
prcomp(training[,-1])$rotation
source('~/.active-rstudio-document', echo=TRUE)
modelFit <- train(classe ~ .,method="rf", data=training)
inTrain = createDataPartition(tidy$classe, p = 3/4)[[1]]
training = tidy[inTrain,]
testing = tidy[-inTrain,]
View(training)
modelFit <- train(classe ~.,method="rf", data=training,prox=TRUE)
setwd("~/scripts/r")
library(AppliedPredictiveModeling)
library(caret)
library(pgmm)
data(olive)
olive = olive[,-1]
View(olive)
newdata = as.data.frame(t(colMeans(olive)))
View(newdata)
class(olive$Area)
modFit <- train(Area ~.,method="rpart",data=olive)
modFit <- train(Area ~ .,method="rpart",data=olive)
olive
data(olive)
View(olive)
olive = olive[,-1]
View(olive)
newdata = as.data.frame(t(colMeans(olive)))
modFit$finalModel
predict(modFit,newdata)
modFit <- train(Area ~ ., method="tree", data=olive)
library(pgmm)
data(olive)
olive = olive[,-1]
modFit <- train(Area ~ ., method="tree", data=olive)
modFit <- train(Area ~ ., method="rpart", data=olive)
setwd("~/scripts/r")
# Question 1
# Load the cell segmentation data from the AppliedPredictiveModeling package using the commands:
library(AppliedPredictiveModeling)
library(caret)
data(segmentationOriginal)
set.seed(125)
training <- training[,3:119]
modFit <- train(Class ~ ., method="rpart",data=training[,3:119])
modFit$finalModel
inTrain = createDataPartition(segmentationOriginal$Case, p = 3/4)[[1]]
training = segmentationOriginal[ inTrain,]
testing = segmentationOriginal[-inTrain,]
set.seed(125)
training <- training[,3:119]
modFit <- train(Class ~ ., method="rpart",data=training[,3:119])
modFit$finalModel
training <- training[,3:119]
View(training)
inTrain = createDataPartition(segmentationOriginal$Case, p = 3/4)[[1]]
training = segmentationOriginal[ inTrain,]
testing = segmentationOriginal[-inTrain,]
View(training)
set.seed(125)
training <- training[,3:119]
modFit <- train(Class ~ ., method="rpart",data=training)
modFit$finalModel
library(rattle)
library(rpart.plot)
fancyRpartPlot(modFit$finalModel)
library(pgmm)
data(olive)
olive = olive[,-1]
modFit <- train(Area ~ ., method="rpart", data=olive)
modFit$finalModel
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages(c("car", "evaluate", "ggplot2", "glm2", "jsonlite", "knitr", "lava", "maps", "markdown", "MASS", "memoise", "prodlim", "psych", "Rcpp", "reshape", "reshape2", "RJSONIO", "scales", "yaml"))
install.packages(c("car", "evaluate", "ggplot2", "glm2", "jsonlite",
setwd('~/Documents/Courses/Developing Data Products/testDeck')
library(slidify)
library(knitr)
publish(user = "aliciatb", repo = "testDeck")
